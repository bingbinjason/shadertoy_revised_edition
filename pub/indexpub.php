<!DOCTYPE HTML> <!DOCTYPE html PUBLIC "" ""><html lang="en"><head><title>Working Desktop</title><meta charset="utf-8"><meta http-equiv="Content-Type" content="text/html;charset=utf-8"/><meta http-equiv="X-UA-Compatible" content="IE=Edge,chrome=1"><style>body{background-color:#000;margin:0;padding:0;overflow:hidden}textarea{height:26px;width:120px;color:#fff;background-color:#000;opacity:0.5;cursor:pointer;border:none;border-radius:5px;margin-right:5px}button,select,a,save,help,a:visited{padding:8px 12px 8px 12px;border:none;border-radius:5px;margin-right:5px;color:#fff;background-color:#000;opacity:0.5;font-family:Monospace;font-size:12px;font-weight:bold;cursor:pointer;text-decoration:none}button:hover,select:hover,a:hover{opacity:1;box-shadow:0 0 4px #FFF}option{color:#fff;background-color:#000}</style><link rel="stylesheet" href="css/dialog.css"><link rel="stylesheet" href="css/dlAlert.css"> <?php //include 'config.php'; include 'photo.php'; ?></head><body onload="watchInit()" onresize="watchResize()"><link rel="stylesheet" href="css/minitotlecss.css"> <script src="js/minitotle_o.js"></script> <span id="myFramerate" class="playerBar" style="top:4px;left:0px;color:#ffffff;position:absolute;">60.0 fps</span> <script id="example" type="x-shader/x-fragment">float function(float x){return sin(x);} float graph_f(vec2 uv,vec2 resolution,float scale){float graph=step(uv.y,function(uv.x))-step(uv.y+(scale/resolution.y),function(uv.x));graph+=step(uv.y,function(uv.x+(scale/resolution.y)))-step(uv.y+(scale/resolution.y),function(uv.x));graph+=step(uv.y,function(uv.x-(scale/resolution.y)))-step(uv.y+(scale/resolution.y),function(uv.x));return clamp(graph,0.,1.);} void mainImage(out vec4 fragColor,in vec2 fragCoord) {vec2 pos=fragCoord.xy/iResolution.xy;float scale=4.;vec2 uv=((fragCoord.xy-0.5*iResolution.xy)/iResolution.y)*scale;float graph=graph_f(uv,iResolution.xy,scale);float center=float(floor(fragCoord.x)==floor(iResolution.x/2.)||floor(fragCoord.y)==floor(iResolution.y/2.));float grid=float(fract(uv.x-(scale/iResolution.y))>fract(uv.x)||fract(uv.y-(scale/iResolution.y))>fract(uv.y));for(float h=1.;h<4.;h++){float i=pow(2.,h);grid+=(1./i)*float(fract((uv.x*i)-((scale*i)/iResolution.y))>fract((uv.x*i))||fract((uv.y*i)-((scale*i)/iResolution.y))>fract((uv.y*i)));} fragColor=vec4(vec3(graph,0.,0.)+(center*.5)+(grid*.3),1.0);}</script> <script id="fragmentShader" type="x-shader/x-fragment">precision mediump float;uniform vec2 resolution;uniform sampler2D texture;void main(){vec2 uv=gl_FragCoord.xy/resolution.xy;gl_FragColor=texture2D(texture,uv);}</script> <script id="vertexShader" type="x-shader/x-vertex">attribute vec3 position;void main(){gl_Position=vec4(position,1.0);}</script> <script id="surfaceVertexShader" type="x-shader/x-vertex">attribute vec3 position;attribute vec2 surfacePosAttrib;varying vec2 surfacePosition;void main(){surfacePosition=surfacePosAttrib;gl_Position=vec4(position,1.0);}</script> <div id="pickTexture" class="dialog" style="left:30%;top:20%"><div id="pickTextureHeader" class="dialogHeader"><div class="dialogTitle">Select Input</div><div class="dialogCloseButton" onclick='overlay(null,"image")'></div></div><div class="dialogContent"><div class="dialogContentBody"><b>Misc</b><br><table class="PickInputSection"><tbody><tr><td valign="top"><img class="inputThumbnail" src="txs/none.png" onclick="gShaderToy.SetTexture(gCurrentEditingSlot, {mType:null, mID:-1, mSrc:null})"></td><td width="4px"></td><td valign="top"><img class="inputThumbnail" src="txs/keyboard.png" onclick="gShaderToy.SetTexture(gCurrentEditingSlot, {mType:'keyboard', mID:33, mSrc:null, mSampler:{ filter: 'linear', wrap: 'clamp', vflip:'true', srgb:'false', internal:'byte' }})"></td><td width="4px"></td><td valign="top"><img class="inputThumbnail" src="txs/webcam.png" onclick=" gShaderToy.SetTexture(gCurrentEditingSlot, {mType:'webcam', mID:31, mSrc:'txs/webcam.png', mSampler:{ filter: 'linear', wrap: 'clamp', vflip:'true', srgb:'false', internal:'byte' }})"></td><td width="4px"></td><td valign="top"><img class="inputThumbnail" src="txs/mic.png" onclick="gShaderToy.SetTexture(gCurrentEditingSlot, {mType:'mic', mID:32, mSrc:'txs/mic.png', mSampler:{ filter: 'linear', wrap: 'clamp', vflip:'true', srgb:'false', internal:'byte' }})"></td></tr></tbody></table> <br><b>Buffers</b> <br><table class="PickInputSection"><tbody><tr><td valign="top"><img class="inputThumbnail" src="txs/buffer00.png" onclick=" gShaderToy.SetTexture(gCurrentEditingSlot, {mType:'buffer', mID:257, mSrc:'txs/buffer00.png', mSampler:{ filter: 'linear', wrap: 'clamp', vflip:'true', srgb:'false', internal:'byte' }})"></td><td width="4px"></td><td valign="top"><img class="inputThumbnail" src="txs/buffer01.png" onclick=" gShaderToy.SetTexture(gCurrentEditingSlot, {mType:'buffer', mID:258, mSrc:'txs/buffer01.png', mSampler:{ filter: 'linear', wrap: 'clamp', vflip:'true', srgb:'false', internal:'byte' }})"></td><td width="4px"></td><td valign="top"><img class="inputThumbnail" src="txs/buffer02.png" onclick=" gShaderToy.SetTexture(gCurrentEditingSlot, {mType:'buffer', mID:259, mSrc:'txs/buffer02.png', mSampler:{ filter: 'linear', wrap: 'clamp', vflip:'true', srgb:'false', internal:'byte' }})"></td><td width="4px"></td><td valign="top"><img class="inputThumbnail" src="txs/buffer03.png" onclick=" gShaderToy.SetTexture(gCurrentEditingSlot, {mType:'buffer', mID:260, mSrc:'txs/buffer03.png', mSampler:{ filter: 'linear', wrap: 'clamp', vflip:'true', srgb:'false', internal:'byte' }})"></td></tr></tbody></table><br><b>Textures</b><br><table class="PickInputSection"><tbody><tr><td valign="top"><img class="inputThumbnail" src="txs/tex00.jpg" onclick=" gShaderToy.SetTexture(gCurrentEditingSlot, {mType:'texture', mID:1, mSrc:'txs/tex00.jpg', mSampler:{ filter: 'mipmap', wrap: 'repeat', vflip:'true', srgb:'false', internal:'byte' }})"></td><td width="4px"></td><td valign="top"><img class="inputThumbnail" src="txs/tex01.jpg" onclick=" gShaderToy.SetTexture(gCurrentEditingSlot, {mType:'texture', mID:2, mSrc:'txs/tex01.jpg', mSampler:{ filter: 'mipmap', wrap: 'repeat', vflip:'true', srgb:'false', internal:'byte' }})"></td><td width="4px"></td><td valign="top"><img class="inputThumbnail" src="txs/tex02.jpg" onclick=" gShaderToy.SetTexture(gCurrentEditingSlot, {mType:'texture', mID:3, mSrc:'txs/tex02.jpg', mSampler:{ filter: 'mipmap', wrap: 'repeat', vflip:'true', srgb:'false', internal:'byte' }})"></td><td width="4px"></td><td valign="top"><img class="inputThumbnail" src="txs/tex03.jpg" onclick=" gShaderToy.SetTexture(gCurrentEditingSlot, {mType:'texture', mID:4, mSrc:'txs/tex03.jpg', mSampler:{ filter: 'mipmap', wrap: 'repeat', vflip:'true', srgb:'false', internal:'byte' }})"></td><td width="4px"></td><td valign="top"><img class="inputThumbnail" src="txs/tex04.jpg" onclick=" gShaderToy.SetTexture(gCurrentEditingSlot, {mType:'texture', mID:5, mSrc:'txs/tex04.jpg', mSampler:{ filter: 'mipmap', wrap: 'repeat', vflip:'true', srgb:'false', internal:'byte' }})"></td><td width="4px"></td></tr><tr><td valign="top"><img class="inputThumbnail" src="txs/tex05.jpg" onclick=" gShaderToy.SetTexture(gCurrentEditingSlot, {mType:'texture', mID:6, mSrc:'txs/tex05.jpg', mSampler:{ filter: 'mipmap', wrap: 'repeat', vflip:'true', srgb:'false', internal:'byte' }})"></td><td width="4px"></td><td valign="top"><img class="inputThumbnail" src="txs/tex06.jpg" onclick=" gShaderToy.SetTexture(gCurrentEditingSlot, {mType:'texture', mID:7, mSrc:'txs/tex06.jpg', mSampler:{ filter: 'mipmap', wrap: 'repeat', vflip:'true', srgb:'false', internal:'byte' }})"></td><td width="4px"></td><td valign="top"><img class="inputThumbnail" src="txs/tex07.jpg" onclick=" gShaderToy.SetTexture(gCurrentEditingSlot, {mType:'texture', mID:8, mSrc:'txs/tex07.jpg', mSampler:{ filter: 'mipmap', wrap: 'repeat', vflip:'true', srgb:'false', internal:'byte' }})"></td><td width="4px"></td><td valign="top"><img class="inputThumbnail" src="txs/tex08.jpg" onclick=" gShaderToy.SetTexture(gCurrentEditingSlot, {mType:'texture', mID:9, mSrc:'txs/tex08.jpg', mSampler:{ filter: 'mipmap', wrap: 'repeat', vflip:'true', srgb:'false', internal:'byte' }})"></td><td width="4px"></td><td valign="top"><img class="inputThumbnail" src="txs/tex09.jpg" onclick=" gShaderToy.SetTexture(gCurrentEditingSlot, {mType:'texture', mID:10, mSrc:'txs/tex09.jpg', mSampler:{ filter: 'mipmap', wrap: 'repeat', vflip:'true', srgb:'false', internal:'byte' }})"></td><td width="4px"></td></tr><tr><td valign="top"><img class="inputThumbnail" src="txs/tex10.png" width="64" height="64" onclick=" gShaderToy.SetTexture(gCurrentEditingSlot, {mType:'texture', mID:11, mSrc:'txs/tex10.png', mSampler:{ filter: 'mipmap', wrap: 'repeat', vflip:'true', srgb:'false', internal:'byte' }})"></td><td width="4px"></td><td valign="top"><img class="inputThumbnail" src="txs/tex11.png" onclick=" gShaderToy.SetTexture(gCurrentEditingSlot, {mType:'texture', mID:12, mSrc:'txs/tex11.png', mSampler:{ filter: 'mipmap', wrap: 'repeat', vflip:'true', srgb:'false', internal:'byte' }})"></td><td width="4px"></td><td valign="top"><img class="inputThumbnail" src="txs/tex12.png" onclick=" gShaderToy.SetTexture(gCurrentEditingSlot, {mType:'texture', mID:13, mSrc:'txs/tex12.png', mSampler:{ filter: 'mipmap', wrap: 'repeat', vflip:'true', srgb:'false', internal:'byte' }})"></td><td width="4px"></td><td valign="top"><img class="inputThumbnail" src="txs/tex13.png" onclick=" gShaderToy.SetTexture(gCurrentEditingSlot, {mType:'texture', mID:14, mSrc:'txs/tex13.png', mSampler:{ filter: 'mipmap', wrap: 'repeat', vflip:'true', srgb:'false', internal:'byte' }})"></td><td width="4px"></td><td valign="top"><img class="inputThumbnail" src="txs/tex14.jpg" onclick=" gShaderToy.SetTexture(gCurrentEditingSlot, {mType:'texture', mID:15, mSrc:'txs/tex14.jpg', mSampler:{ filter: 'mipmap', wrap: 'repeat', vflip:'true', srgb:'false', internal:'byte' }})"></td><td width="4px"></td></tr><tr><td valign="top"><img class="inputThumbnail" src="txs/tex15.jpg" onclick=" gShaderToy.SetTexture(gCurrentEditingSlot, {mType:'texture', mID:16, mSrc:'txs/tex15.jpg', mSampler:{ filter: 'mipmap', wrap: 'repeat', vflip:'true', srgb:'false', internal:'byte' }})"></td></tr></tbody></table><div id="textures_"><div id="texture" class="inputSelector_"><div id="mySampler" class="inputSampler_"> <br> Filter <select class="inputForm" id="mySamplerFilter" style="width:80px;" title="Pixel filtering mode" onchange="filterChange(this.value)"><option value="nearest" selected="selected">nearest</option><option value="linear">linear</option><option value="mipmap">mipmap</option> </select> <br> Wrap <select class="inputForm" id="mySamplerWrap" style="width:80px;" title="Pixel wraping mode" onchange="wrapChange(this.value );"><option value="clamp" selected="selected">clamp</option><option value="repeat">repeat</option> </select> <br><div id="mySamplerVFlipLabel"><label>VFlip<input id="mySamplerVFlip" value="No" onchange='vflipChange((this.checked)?"true":"false");' type="checkbox"></label></div></div><div id="inputSelectorControls" class="inputSelectorControls_"><div id="myUnitText" class="inputSelectorText">iChannel</div> <img src="txs/options.png" title="sampler options" id="mySamplingButton" style="right: 2px; top: 1px; visibility: hidden;" class="uiButton"></div></div></div></div></div></div><div id="dlgHelp" class="dialog" style="left:30%;top:30%"><div id="dlgHelpHeader" class="dialogHeader"><div class="dialogTitle">GLSL帮助</div><div class="dialogCloseButton" onclick="showHelp()"></div></div><div class="dialogContent"><div class="dialogContentBody">此帮助只覆盖与Shadertoy相关的GLSL ES部分。完整的规范请看 <a class="user" href="">GLSL ES规范</a> <br><h2>Language:</h2><hr><ul><li><b>Preprocessor:</b> # #define #undef #if #ifdef #ifndef #else #elif #endif #error #pragma #extension #version #line</li><li><b>Operators:</b> () + - ! * / % &lt; &gt; &lt;= &gt;= == != &amp;&amp; ||</li><li><b>Comments:</b> // /* */</li><li><b>Types:</b> void bool int float vec2 vec3 vec4 bvec2 bvec3 bvec4 ivec2 ivec3 ivec4 mat2 mat3 mat4 sampler2D</li><li><b>Function Parameter Qualifiers:</b> [none], in, out, inout</li><li><b>Global Variable Qualifiers:</b> const</li><li><b>Vector Components:</b> .xyzw .rgba .stpq</li><li><b>Flow Control:</b> if else for return break continue</li><li><b>Output:</b> vec4 fragColor</li><li><b>Input:</b> vec2 fragCoord</li></ul><br><h2>Built-in Functions:</h2><hr><table><tbody><tr><td><ul><li>type radians (type degrees)</li><li>type degrees (type radians)</li><li>type sin (type angle)</li><li>type cos (type angle)</li><li>type tan (type angle)</li><li>type asin (type x)</li><li>type acos (type x)</li><li>type atan (type y, type x)</li><li>type atan (type y_over_x)</li></ul></td><td><ul><li>type pow (type x, type y)</li><li>type exp (type x)</li><li>type log (type x)</li><li>type exp2 (type x)</li><li>type log2 (type x)</li><li>type sqrt (type x)</li><li>type inversesqrt (type x)</li></ul></td></tr><tr><td><ul><li>type abs (type x)</li><li>type sign (type x)</li><li>type floor (type x)</li><li>type ceil (type x)</li><li>type fract (type x)</li><li>type mod (type x, float y)</li><li>type mod (type x, type y)</li><li>type min (type x, type y)</li><li>type min (type x, float y)</li><li>type max (type x, type y)</li><li>type max (type x, float y)</li><li>type clamp (type x, type minV, type maxV)</li><li>type clamp (type x, float minV, float maxV)</li><li>type mix (type x, type y, type a)</li><li>type mix (type x, type y, float a)</li><li>type step (type edge, type x)</li><li>type step (float edge, type x)</li><li>type smoothstep (type a, type b, type x)</li><li>type smoothstep (float a, float b, type x)</li><li>mat matrixCompMult (mat x, mat y)</li></ul></td><td><ul><li>float length (type x)</li><li>float distance (type p0, type p1)</li><li>float dot (type x, type y)</li><li>vec3 cross (vec3 x, vec3 y)</li><li>type normalize (type x)</li><li>type faceforward (type N, type I, type Nref)</li><li>type reflect (type I, type N)</li><li>type refract (type I, type N,float eta)</li></ul></td></tr><tr><td><ul><li>bvec lessThan(vec x, vec y)</li><li>bvec lessThan(ivec x, ivec y)</li><li>bvec lessThanEqual(vec x, vec y)</li><li>bvec lessThanEqual(ivec x, ivec y)</li><li>bvec greaterThan(vec x, vec y)</li><li>bvec greaterThan(ivec x, ivec y)</li><li>bvec greaterThanEqual(vec x, vec y)</li><li>bvec greaterThanEqual(ivec x, ivec y)</li><li>bvec equal(vec x, vec y)</li><li>bvec equal(ivec x, ivec y)</li><li>bvec equal(bvec x, bvec y)</li><li>bvec notEqual(vec x, vec y)</li><li>bvec notEqual(ivec x, ivec y)</li><li>bvec notEqual(bvec x, bvec y)</li><li>bool any(bvec x)</li><li>bool all(bvec x)</li><li>bvec not(bvec x)</li></ul></td><td><ul><li>vec4 texture2D(sampler2D sampler, vec2 coord )</li><li>vec4 texture2D(sampler2D sampler, vec2 coord, float bias)</li><li>vec4 textureCube(samplerCube sampler, vec3 coord)</li><li>vec4 texture2DProj(sampler2D sampler, vec3 coord )</li><li>vec4 texture2DProj(sampler2D sampler, vec3 coord, float bias)</li><li>vec4 texture2DProj(sampler2D sampler, vec4 coord)</li><li>vec4 texture2DProj(sampler2D sampler, vec4 coord, float bias)</li><li>vec4 texture2DLodEXT(sampler2D sampler, vec2 coord, float lod)</li><li>vec4 texture2DProjLodEXT(sampler2D sampler, vec3 coord, float lod)</li><li>vec4 texture2DProjLodEXT(sampler2D sampler, vec4 coord, float lod)</li><li>vec4 textureCubeLodEXT(samplerCube sampler, vec3 coord, float lod)</li><li>vec4 texture2DGradEXT(sampler2D sampler, vec2 P, vec2 dPdx, vec2 dPdy)</li><li>vec4 texture2DProjGradEXT(sampler2D sampler, vec3 P, vec2 dPdx, vec2 dPdy)</li><li>vec4 texture2DProjGradEXT(sampler2D sampler, vec4 P, vec2 dPdx, vec2 dPdy)</li><li>vec4 textureCubeGradEXT(samplerCube sampler, vec3 P, vec3 dPdx, vec3 dPdy)</li></ul><ul><li>type dFdx( type x ), dFdy( type x )</li><li>type fwidth( type p )</li></ul></td></tr></tbody></table> <br><h2>How-to</h2><hr><ul><li><b>Use structs:</b> struct myDataType { float occlusion; vec3 color; }; myDataType myData = myDataType(0.7, vec3(1.0, 2.0, 3.0));</li><li><b>Initialize arrays:</b> arrays cannot be initialized in WebGL.</li><li><b>Do conversions:</b> int a = 3; float b = float(a);</li><li><b>Do component swizzling:</b> vec4 a = vec4(1.0,2.0,3.0,4.0); vec4 b = a.zyyw;</li><li><b>Access matrix components:</b> mat4 m; m[1] = vec4(2.0); m[0][0] = 1.0; m[2][3] = 2.0;</li></ul> <br><h2>Be careful!</h2><hr><ul><li><b>the <i>f</i> suffix for floating pont numbers:</b> 1.0f is illegal in GLSL. You must use 1.0</li><li><b>saturate():</b> saturate(x) doesn't exist in GLSL. Use clamp(x,0.0,1.0) instead</li><li><b>pow/sqrt:</b> please don't feed sqrt() and pow() with negative numbers. Add an abs() or max(0.0,) to the argument</li><li><b>mod:</b> please don't do mod(x,0.0). This is undefined in some platforms</li><li><b>variables:</b> initialize your variables! Don't assume they'll be set to zero by default</li><li><b>functions:</b> don't call your functions the same as some of your variables</li></ul> <br><h2>Shadertoy Inputs</h2><hr><table><tbody><tr><td><b>vec3</b></td><td><b>iResolution</b></td><td>image</td><td>The viewport resolution (z is pixel aspect ratio, usually 1.0)</td></tr><tr><td><b>float</b></td><td><b>iGlobalTime</b></td><td>image/sound</td><td>Current time in seconds</td></tr><tr><td><b>float</b></td><td><b>iTimeDelta</b></td><td>image</td><td>Time it takes to render a frame, in seconds</td></tr><tr><td><b>int</b></td><td><b>iFrame</b></td><td>image</td><td>Current frame</td></tr><tr><td><b>float</b></td><td><b>iFrameRate</b></td><td>image</td><td>Number of frames rendered per second</td></tr><tr><td><b>float</b></td><td><b>iChannelTime[4]</b></td><td>image</td><td>Time for channel (if video or sound), in seconds</td></tr><tr><td><b>vec3</b></td><td><b>iChannelResolution[4]</b></td><td>image/sound</td><td>Input texture resolution for each channel</td></tr><tr><td><b>vec4</b></td><td><b>iMouse</b></td><td>image</td><td>xy = current pixel coords (if LMB is down). zw = click pixel</td></tr><tr><td><b>sampler2D</b></td><td><b>iChannel{i}</b></td><td>image/sound</td><td>Sampler for input textures i</td></tr><tr><td><b>vec4</b></td><td><b>iDate</b></td><td>image/sound</td><td>Year, month, day, time in seconds in .xyzw</td></tr><tr><td><b>float</b></td><td><b>iSampleRate</b></td><td>image/sound</td><td>The sound sample rate (typically 44100)</td></tr></tbody></table> <br><h2>Shadertoy Outputs</h2><hr> For image shaders, fragColor is used as output channel. It is not, for now, mandatory but recommended to leave the alpha channel to 1.0.<br> <br> For sound shaders, the mainSound() function returns a vec2 containing the left and right (stereo) sound channel wave data. <br> <br> <br></div></div></div><div id="dlgAlertShader" class="dialog"><div class="dialogHeader" id="dlgAlertShaderHeader"><div id="dlgAlertTitle" class="dialogTitle">Share your shader</div><div class="dialogCloseButton" onclick="doAlertClose()"></div></div><div class="dialogContent"><div class="dialogContentBody"><div id="dlgAlertTXT" style="width:90%;overflow-wrap:break-word;"></div><div class="dialogContentButtons" id="dialogContentButtons"><div class="dialogButton" onclick="doAlertConfirmClose()">Yes</div><div class="dialogButton" onclick="doAlertClose()">No</div></div></div></div></div><div id="centerScreen"></div></body></html>